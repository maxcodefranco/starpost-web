/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Starpost API
 * API documentation for Starpost
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query';

import type {
  AuthControllerLoginBody,
  AuthControllerRefreshTokenBody,
  AuthControllerRegisterBody
} from './schemas';

import { apiClientFunction } from '../apiClient';
export const appControllerGetHello = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFunction<void>(
      {url: `/`, method: 'GET', signal
    },
      );
    }
  

export const getAppControllerGetHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = unknown



export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const authControllerRegister = (
    authControllerRegisterBody: AuthControllerRegisterBody,
 signal?: AbortSignal
) => {
      
      
      return apiClientFunction<void>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authControllerRegisterBody, signal
    },
      );
    }
  


export const getAuthControllerRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: AuthControllerRegisterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: AuthControllerRegisterBody}, TContext> => {
    
const mutationKey = ['authControllerRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: AuthControllerRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = AuthControllerRegisterBody
    export type AuthControllerRegisterMutationError = unknown

    export const useAuthControllerRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: AuthControllerRegisterBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerRegister>>,
        TError,
        {data: AuthControllerRegisterBody},
        TContext
      > => {

      const mutationOptions = getAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const authControllerLogin = (
    authControllerLoginBody: AuthControllerLoginBody,
 signal?: AbortSignal
) => {
      
      
      return apiClientFunction<void>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authControllerLoginBody, signal
    },
      );
    }
  


export const getAuthControllerLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: AuthControllerLoginBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: AuthControllerLoginBody}, TContext> => {
    
const mutationKey = ['authControllerLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: AuthControllerLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = AuthControllerLoginBody
    export type AuthControllerLoginMutationError = unknown

    export const useAuthControllerLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: AuthControllerLoginBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerLogin>>,
        TError,
        {data: AuthControllerLoginBody},
        TContext
      > => {

      const mutationOptions = getAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const authControllerRefreshToken = (
    authControllerRefreshTokenBody: AuthControllerRefreshTokenBody,
 signal?: AbortSignal
) => {
      
      
      return apiClientFunction<void>(
      {url: `/auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authControllerRefreshTokenBody, signal
    },
      );
    }
  


export const getAuthControllerRefreshTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefreshToken>>, TError,{data: AuthControllerRefreshTokenBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRefreshToken>>, TError,{data: AuthControllerRefreshTokenBody}, TContext> => {
    
const mutationKey = ['authControllerRefreshToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRefreshToken>>, {data: AuthControllerRefreshTokenBody}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRefreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRefreshToken>>>
    export type AuthControllerRefreshTokenMutationBody = AuthControllerRefreshTokenBody
    export type AuthControllerRefreshTokenMutationError = unknown

    export const useAuthControllerRefreshToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRefreshToken>>, TError,{data: AuthControllerRefreshTokenBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof authControllerRefreshToken>>,
        TError,
        {data: AuthControllerRefreshTokenBody},
        TContext
      > => {

      const mutationOptions = getAuthControllerRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const authControllerGetProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFunction<void>(
      {url: `/auth/profile`, method: 'GET', signal
    },
      );
    }
  

export const getAuthControllerGetProfileQueryKey = () => {
    return [`/auth/profile`] as const;
    }

    
export const getAuthControllerGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetProfile>>> = ({ signal }) => authControllerGetProfile(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type AuthControllerGetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerGetProfile>>>
export type AuthControllerGetProfileQueryError = unknown



export function useAuthControllerGetProfile<TData = Awaited<ReturnType<typeof authControllerGetProfile>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAuthControllerGetProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const profileControllerCreateProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClientFunction<void>(
      {url: `/profile`, method: 'POST', signal
    },
      );
    }
  


export const getProfileControllerCreateProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileControllerCreateProfile>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileControllerCreateProfile>>, TError,void, TContext> => {
    
const mutationKey = ['profileControllerCreateProfile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileControllerCreateProfile>>, void> = () => {
          

          return  profileControllerCreateProfile()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileControllerCreateProfileMutationResult = NonNullable<Awaited<ReturnType<typeof profileControllerCreateProfile>>>
    
    export type ProfileControllerCreateProfileMutationError = unknown

    export const useProfileControllerCreateProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileControllerCreateProfile>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof profileControllerCreateProfile>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getProfileControllerCreateProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const profileControllerGetProfile = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return apiClientFunction<void>(
      {url: `/profile/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getProfileControllerGetProfileQueryKey = (userId: string,) => {
    return [`/profile/${userId}`] as const;
    }

    
export const getProfileControllerGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof profileControllerGetProfile>>, TError = unknown>(userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof profileControllerGetProfile>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileControllerGetProfileQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileControllerGetProfile>>> = ({ signal }) => profileControllerGetProfile(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileControllerGetProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type ProfileControllerGetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof profileControllerGetProfile>>>
export type ProfileControllerGetProfileQueryError = unknown



export function useProfileControllerGetProfile<TData = Awaited<ReturnType<typeof profileControllerGetProfile>>, TError = unknown>(
 userId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof profileControllerGetProfile>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getProfileControllerGetProfileQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
